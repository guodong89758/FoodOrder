package com.foodorder.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.foodorder.db.bean.Order;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER".
*/
public class OrderDao extends AbstractDao<Order, Long> {

    public static final String TABLENAME = "ORDER";

    /**
     * Properties of entity Order.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Id_order = new Property(1, String.class, "id_order", false, "ID_ORDER");
        public final static Property Persons = new Property(2, int.class, "persons", false, "PERSONS");
        public final static Property Number = new Property(3, String.class, "number", false, "NUMBER");
        public final static Property Id_order_type = new Property(4, String.class, "id_order_type", false, "ID_ORDER_TYPE");
        public final static Property Time = new Property(5, String.class, "time", false, "TIME");
        public final static Property Total = new Property(6, double.class, "total", false, "TOTAL");
        public final static Property Type = new Property(7, String.class, "type", false, "TYPE");
    }


    public OrderDao(DaoConfig config) {
        super(config);
    }
    
    public OrderDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ID_ORDER\" TEXT," + // 1: id_order
                "\"PERSONS\" INTEGER NOT NULL ," + // 2: persons
                "\"NUMBER\" TEXT," + // 3: number
                "\"ID_ORDER_TYPE\" TEXT," + // 4: id_order_type
                "\"TIME\" TEXT," + // 5: time
                "\"TOTAL\" REAL NOT NULL ," + // 6: total
                "\"TYPE\" TEXT);"); // 7: type
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String id_order = entity.getId_order();
        if (id_order != null) {
            stmt.bindString(2, id_order);
        }
        stmt.bindLong(3, entity.getPersons());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        String id_order_type = entity.getId_order_type();
        if (id_order_type != null) {
            stmt.bindString(5, id_order_type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindDouble(7, entity.getTotal());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Order entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String id_order = entity.getId_order();
        if (id_order != null) {
            stmt.bindString(2, id_order);
        }
        stmt.bindLong(3, entity.getPersons());
 
        String number = entity.getNumber();
        if (number != null) {
            stmt.bindString(4, number);
        }
 
        String id_order_type = entity.getId_order_type();
        if (id_order_type != null) {
            stmt.bindString(5, id_order_type);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(6, time);
        }
        stmt.bindDouble(7, entity.getTotal());
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(8, type);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Order readEntity(Cursor cursor, int offset) {
        Order entity = new Order( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_order
            cursor.getInt(offset + 2), // persons
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // number
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // id_order_type
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // time
            cursor.getDouble(offset + 6), // total
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // type
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Order entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setId_order(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPersons(cursor.getInt(offset + 2));
        entity.setNumber(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setId_order_type(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTime(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTotal(cursor.getDouble(offset + 6));
        entity.setType(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Order entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Order entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Order entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
