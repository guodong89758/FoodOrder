package com.foodorder.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.foodorder.db.bean.Formula;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "FORMULA".
*/
public class FormulaDao extends AbstractDao<Formula, Long> {

    public static final String TABLENAME = "FORMULA";

    /**
     * Properties of entity Formula.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Id_product = new Property(1, String.class, "id_product", false, "ID_PRODUCT");
        public final static Property Id_product_formula = new Property(2, String.class, "id_product_formula", false, "ID_PRODUCT_FORMULA");
        public final static Property Name = new Property(3, String.class, "name", false, "NAME");
        public final static Property Max_choose = new Property(4, String.class, "max_choose", false, "MAX_CHOOSE");
        public final static Property Id_product_formula_item = new Property(5, String.class, "id_product_formula_item", false, "ID_PRODUCT_FORMULA_ITEM");
        public final static Property Id_product_item = new Property(6, String.class, "id_product_item", false, "ID_PRODUCT_ITEM");
        public final static Property Position = new Property(7, int.class, "position", false, "POSITION");
    }

    private Query<Formula> good_FormulaListQuery;

    public FormulaDao(DaoConfig config) {
        super(config);
    }
    
    public FormulaDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"FORMULA\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ID_PRODUCT\" TEXT," + // 1: id_product
                "\"ID_PRODUCT_FORMULA\" TEXT," + // 2: id_product_formula
                "\"NAME\" TEXT," + // 3: name
                "\"MAX_CHOOSE\" TEXT," + // 4: max_choose
                "\"ID_PRODUCT_FORMULA_ITEM\" TEXT," + // 5: id_product_formula_item
                "\"ID_PRODUCT_ITEM\" TEXT," + // 6: id_product_item
                "\"POSITION\" INTEGER NOT NULL );"); // 7: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"FORMULA\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Formula entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String id_product = entity.getId_product();
        if (id_product != null) {
            stmt.bindString(2, id_product);
        }
 
        String id_product_formula = entity.getId_product_formula();
        if (id_product_formula != null) {
            stmt.bindString(3, id_product_formula);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String max_choose = entity.getMax_choose();
        if (max_choose != null) {
            stmt.bindString(5, max_choose);
        }
 
        String id_product_formula_item = entity.getId_product_formula_item();
        if (id_product_formula_item != null) {
            stmt.bindString(6, id_product_formula_item);
        }
 
        String id_product_item = entity.getId_product_item();
        if (id_product_item != null) {
            stmt.bindString(7, id_product_item);
        }
        stmt.bindLong(8, entity.getPosition());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Formula entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String id_product = entity.getId_product();
        if (id_product != null) {
            stmt.bindString(2, id_product);
        }
 
        String id_product_formula = entity.getId_product_formula();
        if (id_product_formula != null) {
            stmt.bindString(3, id_product_formula);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(4, name);
        }
 
        String max_choose = entity.getMax_choose();
        if (max_choose != null) {
            stmt.bindString(5, max_choose);
        }
 
        String id_product_formula_item = entity.getId_product_formula_item();
        if (id_product_formula_item != null) {
            stmt.bindString(6, id_product_formula_item);
        }
 
        String id_product_item = entity.getId_product_item();
        if (id_product_item != null) {
            stmt.bindString(7, id_product_item);
        }
        stmt.bindLong(8, entity.getPosition());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Formula readEntity(Cursor cursor, int offset) {
        Formula entity = new Formula( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_product
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id_product_formula
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // max_choose
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // id_product_formula_item
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // id_product_item
            cursor.getInt(offset + 7) // position
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Formula entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setId_product(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId_product_formula(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setName(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setMax_choose(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId_product_formula_item(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setId_product_item(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setPosition(cursor.getInt(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Formula entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Formula entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Formula entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "formulaList" to-many relationship of Good. */
    public List<Formula> _queryGood_FormulaList(String id_product) {
        synchronized (this) {
            if (good_FormulaListQuery == null) {
                QueryBuilder<Formula> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_product.eq(null));
                good_FormulaListQuery = queryBuilder.build();
            }
        }
        Query<Formula> query = good_FormulaListQuery.forCurrentThread();
        query.setParameter(0, id_product);
        return query.list();
    }

}
