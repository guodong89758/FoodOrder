package com.foodorder.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.foodorder.db.bean.Attribute;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ATTRIBUTE".
*/
public class AttributeDao extends AbstractDao<Attribute, Long> {

    public static final String TABLENAME = "ATTRIBUTE";

    /**
     * Properties of entity Attribute.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Id_product = new Property(1, String.class, "id_product", false, "ID_PRODUCT");
        public final static Property Id_product_attribute = new Property(2, String.class, "id_product_attribute", false, "ID_PRODUCT_ATTRIBUTE");
        public final static Property Zh_name = new Property(3, String.class, "zh_name", false, "ZH_NAME");
        public final static Property Fr_name = new Property(4, String.class, "fr_name", false, "FR_NAME");
        public final static Property Value = new Property(5, String.class, "value", false, "VALUE");
    }

    private Query<Attribute> good_AttributeListQuery;

    public AttributeDao(DaoConfig config) {
        super(config);
    }
    
    public AttributeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ATTRIBUTE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL ," + // 0: id
                "\"ID_PRODUCT\" TEXT," + // 1: id_product
                "\"ID_PRODUCT_ATTRIBUTE\" TEXT," + // 2: id_product_attribute
                "\"ZH_NAME\" TEXT," + // 3: zh_name
                "\"FR_NAME\" TEXT," + // 4: fr_name
                "\"VALUE\" TEXT);"); // 5: value
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ATTRIBUTE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Attribute entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String id_product = entity.getId_product();
        if (id_product != null) {
            stmt.bindString(2, id_product);
        }
 
        String id_product_attribute = entity.getId_product_attribute();
        if (id_product_attribute != null) {
            stmt.bindString(3, id_product_attribute);
        }
 
        String zh_name = entity.getZh_name();
        if (zh_name != null) {
            stmt.bindString(4, zh_name);
        }
 
        String fr_name = entity.getFr_name();
        if (fr_name != null) {
            stmt.bindString(5, fr_name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Attribute entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String id_product = entity.getId_product();
        if (id_product != null) {
            stmt.bindString(2, id_product);
        }
 
        String id_product_attribute = entity.getId_product_attribute();
        if (id_product_attribute != null) {
            stmt.bindString(3, id_product_attribute);
        }
 
        String zh_name = entity.getZh_name();
        if (zh_name != null) {
            stmt.bindString(4, zh_name);
        }
 
        String fr_name = entity.getFr_name();
        if (fr_name != null) {
            stmt.bindString(5, fr_name);
        }
 
        String value = entity.getValue();
        if (value != null) {
            stmt.bindString(6, value);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public Attribute readEntity(Cursor cursor, int offset) {
        Attribute entity = new Attribute( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // id_product
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // id_product_attribute
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // zh_name
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // fr_name
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // value
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Attribute entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setId_product(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setId_product_attribute(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setZh_name(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setFr_name(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setValue(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Attribute entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Attribute entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Attribute entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "attributeList" to-many relationship of Good. */
    public List<Attribute> _queryGood_AttributeList(String id_product) {
        synchronized (this) {
            if (good_AttributeListQuery == null) {
                QueryBuilder<Attribute> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Id_product.eq(null));
                good_AttributeListQuery = queryBuilder.build();
            }
        }
        Query<Attribute> query = good_AttributeListQuery.forCurrentThread();
        query.setParameter(0, id_product);
        return query.list();
    }

}
